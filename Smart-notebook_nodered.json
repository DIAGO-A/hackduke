[{"id":"94fc200f.04fc9","type":"tab","label":"Flow 10","disabled":false,"info":""},{"id":"fe146b0b.3be0e8","type":"template","z":"94fc200f.04fc9","name":"","field":"payload","fieldType":"msg","format":"html","syntax":"plain","template":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<script src=\"https://www.WebRTC-Experiment.com/RecordRTC.js\"></script>\n<body>\n  <header>\n    <h1 class=\"header__title\">Real-Time Transcription HACKDUKE 2021 by Assembly AI</h1>\n    <p class=\"header__sub-title\"></p>\n  </header>\n  <div class=\"real-time-interface\">\n    <p id=\"real-time-title\" class=\"real-time-interface__title\"></p>\n    <p id=\"button\" class=\"real-time-interface__button\">Start</p>\n    <p id=\"message\" class=\"real-time-interface__message\"></p>\n  </div>\n<script>\n/**\n * The JWT token you get after authenticating with our API.\n * Check the Authentication section of the documentation for more details.\n */\n\n//var theScope = scope;\n// required dom elements\nconst buttonEl = document.getElementById('button');\nconst messageEl = document.getElementById('message');\nconst titleEl = document.getElementById('real-time-title');\n\n// set initial state of application variables\nmessageEl.style.display = 'none';\nlet isRecording = false;\nlet socket;\nlet recorder;\n\n// runs real-time transcription and handles global variables\nconst run = async () => {\n  if (isRecording) { \n    if (socket) {\n      socket.send(JSON.stringify({terminate_session: true}));\n      socket.close();\n      socket = null;\n    }\n\n    if (recorder) {\n      recorder.pauseRecording();\n      recorder = null;\n    }\n  } else {\n     \n      \n\n    \n\n\n    //const { data } = response;\n    \n      \n      \n      \n      \n  // get temp session token from server.js (backend)\n    const data = \"6c01e017f9d1258deb038a7d18389a9d2986f00156520f1852b1281528e564ee\"\n\n    \n    \n\n    // establish wss with AssemblyAI (AAI) at 16000 sample rate\n    socket = await new WebSocket(`wss://api.assemblyai.com/v2/realtime/ws?sample_rate=16000&token=${data}`);\n\n    // handle incoming messages to display transcription to the DOM\n    const texts = {};\n    socket.onmessage = (message) => {\n      let msg = '';\n      const res = JSON.parse(message.data);\n      texts[res.audio_start] = res.text;\n      const keys = Object.keys(texts);\n      keys.sort((a, b) => a - b);\n      for (const key of keys) {\n        if (texts[key]) {\n          msg += ` ${texts[key]}`;\n        }\n      }\n      messageEl.innerText = msg;\n    };\n\n    socket.onerror = (event) => {\n      console.error(event);\n      socket.close();\n    }\n    \n    socket.onclose = event => {\n      console.log(event);\n      socket = null;\n    }\n\n    socket.onopen = () => {\n      // once socket is open, begin recording\n      messageEl.style.display = '';\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then((stream) => {\n          recorder = new RecordRTC(stream, {\n            type: 'audio',\n            mimeType: 'audio/webm;codecs=pcm', // endpoint requires 16bit PCM audio\n            recorderType: StereoAudioRecorder,\n            timeSlice: 250, // set 250 ms intervals of data that sends to AAI\n            desiredSampRate: 16000,\n            numberOfAudioChannels: 1, // real-time requires only one channel\n            bufferSize: 4096,\n            audioBitsPerSecond: 128000,\n            ondataavailable: (blob) => {\n              const reader = new FileReader();\n              reader.onload = () => {\n                const base64data = reader.result;\n\n                // audio data must be sent as a base64 encoded string\n                if (socket) {\n                  socket.send(JSON.stringify({ audio_data: base64data.split('base64,')[1] }));\n                }\n              };\n              reader.readAsDataURL(blob);\n            },\n          });\n\n          recorder.startRecording();\n        })\n        .catch((err) => console.error(err));\n    };\n  }\n\n  isRecording = !isRecording;\n  buttonEl.innerText = isRecording ? 'Stop' : 'Record';\n  titleEl.innerText = isRecording ? 'Click stop to end recording!' : 'Click start to begin recording!'\n};\n\nbuttonEl.addEventListener('click', () => run());\n</script> \n\n</body>\n</html>","output":"str","x":600,"y":200,"wires":[["5d490ebb.fbf5a"]]},{"id":"5d490ebb.fbf5a","type":"http response","z":"94fc200f.04fc9","name":"","statusCode":"","headers":{},"x":630,"y":340,"wires":[]},{"id":"d63ffc00.5a7e1","type":"inject","z":"94fc200f.04fc9","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":140,"y":360,"wires":[["a74f8c3c.f4e8"]]},{"id":"b4a6b28b.105dc","type":"http request","z":"94fc200f.04fc9","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"https://api.assemblyai.com/v2/realtime/token","tls":"","persist":false,"proxy":"","authType":"","x":330,"y":100,"wires":[["6d20d712.ef2668"]]},{"id":"a74f8c3c.f4e8","type":"change","z":"94fc200f.04fc9","name":"","rules":[{"t":"set","p":"headers","pt":"msg","to":"{\"authorization\":\"63bf724d31ac4b8784143fce713c520c\",\"content-type\":\"application/json\"}","tot":"json"},{"t":"set","p":"payload","pt":"msg","to":"{\"expires_in\": \"3600\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":140,"y":200,"wires":[["b4a6b28b.105dc"]]},{"id":"6d20d712.ef2668","type":"debug","z":"94fc200f.04fc9","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":690,"y":80,"wires":[]},{"id":"51faa5df.97abbc","type":"http in","z":"94fc200f.04fc9","name":"","url":"/aa","method":"get","upload":false,"swaggerDoc":"","x":400,"y":440,"wires":[["fe146b0b.3be0e8"]]}]